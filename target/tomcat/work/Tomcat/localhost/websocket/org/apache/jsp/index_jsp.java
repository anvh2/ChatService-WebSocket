/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2019-05-17 09:06:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <title>Chat Room</title>\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\n");
      out.write("    <script src=\"https://code.jquery.com/jquery-1.10.2.js\"></script>\n");
      out.write("    <style>\n");
      out.write("        .list-friend :hover{\n");
      out.write("            cursor: pointer;\n");
      out.write("            color: #18f;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<h2>Chat WebSocket || <a href=\"");
      out.print(request.getContextPath());
      out.write("/logout\">Logout</a></h2>\n");
      out.write("<div  style=\"float: left; width: 20%;\">\n");
      out.write("    <h4>Friends:</h4>\n");
      out.write("    <ul id=\"list-friend\" class=\"list-group list-group-flush list-friend\">\n");
      out.write("        <li onclick=\"chatWith('admin')\" class=\"list-group-item\">Admin</li>\n");
      out.write("        <li onclick=\"chatWith('home')\" class=\"list-group-item\">Home</li>\n");
      out.write("        <li onclick=\"chatWith('conan')\" class=\"list-group-item\">Conan</li>\n");
      out.write("        <li onclick=\"chatWith('kid')\" class=\"list-group-item\">Kid</li>\n");
      out.write("    </ul>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<div id=\"chat-frame\">\n");
      out.write("    <h4>Chat:</h4>\n");
      out.write("    <div id=\"name\"></div>\n");
      out.write("    <input autofocus onkeypress=\"sendMessage(event)\" id=\"textMessage\" type=\"text\" />\n");
      out.write("    <input readonly onclick=\"sendMessage()\" value=\"Send Message\" type=\"button\"/> <br/><br/>\n");
      out.write("\n");
      out.write("    <textarea id=\"textAreaMessage\" rows=\"10\" cols=\"50\"></textarea>\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("    //get parameter from url\n");
      out.write("    function getUrlVars() {\n");
      out.write("        var vars = {};\n");
      out.write("        var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {\n");
      out.write("            vars[key] = value;\n");
      out.write("        });\n");
      out.write("        return vars;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    //get username\n");
      out.write("    const username = getUrlVars()[\"username\"];\n");
      out.write("    //create websocket\n");
      out.write("    const websocket = new WebSocket(\"ws://localhost:8080/websocket/messenger/\" + username);\n");
      out.write("    const messageSend = document.getElementById(\"textMessage\");\n");
      out.write("    const messageWindow = document.getElementById(\"textAreaMessage\");\n");
      out.write("\n");
      out.write("    class Message{\n");
      out.write("        constructor(sender, receiver, content) {\n");
      out.write("            this.sender = sender;\n");
      out.write("            this.receiver = receiver;\n");
      out.write("            this.content = content;\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    websocket.onopen = function() {\n");
      out.write("        //status.value = \"Connected\";\n");
      out.write("        // alert(websocket.sessionId);\n");
      out.write("    };\n");
      out.write("    websocket.onmessage = function(message) {\n");
      out.write("        var object = JSON.parse(message.data);\n");
      out.write("        console.log(object);\n");
      out.write("\n");
      out.write("        if(object.content === \"online\"){\n");
      out.write("            appendOnlineFriend(object.sender, \"\");\n");
      out.write("        } else if(object.content === \"offline\"){\n");
      out.write("            removeOnlineFriend(object.sender, \"\");\n");
      out.write("        } else {\n");
      out.write("            messageWindow.value += object.sender + \": \" + object.content + \"\\n\";\n");
      out.write("        }\n");
      out.write("    };\n");
      out.write("    websocket.onclose = function() {\n");
      out.write("        messageWindow.value = \"Server disconnected\";\n");
      out.write("    };\n");
      out.write("    websocket.onerror = function(message) {\n");
      out.write("        messageWindow.value += \"Error: \" + message + \"\\n\";\n");
      out.write("    };\n");
      out.write("\n");
      out.write("    function sendMessage() {\n");
      out.write("        if (typeof websocket != 'undefined' && websocket.readyState === WebSocket.OPEN && messageSend.value.length > 0) {\n");
      out.write("            websocket.send(messageSend.value);\n");
      out.write("            messageSend.value = \"\";\n");
      out.write("        } else {\n");
      out.write("            console.log(\"State of websocket is not open\");\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function sendMessage(event) {\n");
      out.write("        if (event.keyCode === 13){\n");
      out.write("            if (typeof websocket != 'undefined' && websocket.readyState === WebSocket.OPEN && messageSend.value.length > 0) {\n");
      out.write("                websocket.send(messageSend.value);\n");
      out.write("                messageSend.value = \"\";\n");
      out.write("            } else {\n");
      out.write("                console.log(\"State of websocket is not open\");\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function chatWith(username) {\n");
      out.write("        var user = document.getElementsByName(\"username\");\n");
      out.write("        var message;\n");
      out.write("\n");
      out.write("        //delete message window\n");
      out.write("        messageWindow.value = \"\";\n");
      out.write("\n");
      out.write("        message = \"user-\" + username;\n");
      out.write("\n");
      out.write("        if (typeof websocket != 'undefined' && websocket.readyState === WebSocket.OPEN) {\n");
      out.write("            websocket.send(message);\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function appendOnlineFriend(newusername, name){\n");
      out.write("        const container = document.getElementById(\"list-friend\");\n");
      out.write("        const element = document.createElement('li');\n");
      out.write("\n");
      out.write("        element.className = \"list-group-item\";\n");
      out.write("        element.id = newusername;\n");
      out.write("        element.textContent = newusername;\n");
      out.write("\n");
      out.write("        element.addEventListener('click', () => {\n");
      out.write("            var user = document.getElementsByName(\"username\");\n");
      out.write("            var message;\n");
      out.write("\n");
      out.write("            //delete message window\n");
      out.write("            messageWindow.value = \"\";\n");
      out.write("\n");
      out.write("            message = \"user-\" + newusername;\n");
      out.write("\n");
      out.write("            if (typeof websocket != 'undefined' && websocket.readyState === WebSocket.OPEN) {\n");
      out.write("                websocket.send(message);\n");
      out.write("            }\n");
      out.write("        })\n");
      out.write("\n");
      out.write("        container.appendChild(element);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function removeOnlineFriend(username, name){\n");
      out.write("        var li = document.getElementById(username);\n");
      out.write("\n");
      out.write("        li.parentNode.removeChild(li);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    $( document ).ready(function() {\n");
      out.write("        console.log( \"ready!\" );\n");
      out.write("    });\n");
      out.write("</script>\n");
      out.write("</html>\n");
      out.write("\n");
      out.write("<!--    function sendMessage() {-->\n");
      out.write("<!--        if (typeof websocket != 'undefined' && websocket.readyState == WebSocket.OPEN) {-->\n");
      out.write("<!--            var message = new Message(\"hoangan\", \"hoaian\", \"Hello\");-->\n");
      out.write("<!--            websocket.send(JSON.stringify(message))-->\n");
      out.write("<!--            messageSend.value =\"\";-->\n");
      out.write("<!--        }-->\n");
      out.write("<!--    }-->");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
